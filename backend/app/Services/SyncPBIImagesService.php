<?php

namespace App\Services;

// Import Tools
use Ramsey\Uuid\Uuid;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

// Import Models
use App\Models\User;
use App\Models\Slide;
use App\Models\Signage;
use App\Models\PBIImage;
use App\Models\PBIObject;
use App\Models\PBIRequest;
use App\Models\Repository;
use App\Models\PBIWorkspace;
use App\Models\UserGlobalProperties;
// Import Services
use App\Services\PBIRequestService;
use App\Services\SystemLogService as Que;


class SyncPBIImagesService
{

	public function __construct(
		protected PBIRequestService $pbiRequestService
	) {}

	public function getImageStatus($requestId)
	{
		$request = PBIRequest::findOrFail($requestId);

		if ($request->attempts >= $request->max_attempts) {
			$image = PBIImage::findOrFail($request->image_id);
			if ($image) $image->delete();
			return "Max attempts reached";
		}

		$endpoint = config('powerbi.checkImageStatus');

		$response = $this->pbiRequestService->makeRequest('GET', $endpoint, [
			'accountId' => $request->account_id,
			'workspaceId' => $request->workspace_id,
			'reportId' => $request->object_id,
			'exportId' => $request->export_id
		]);

		$request->attempts++;
		$request->save();

		if (isset($response['status']) && isset($response['error'])) {
			if ($request->attempts == $request->max_attempts) {

				$request->status = 'error';
				$request->save();

				$image = PBIImage::findOrFail($request->image_id);
				$image->repository_id = null;
				$image->save();

				if ($image->repository_id) {
					$repository = Repository::findOrFail($image->repository_id);
					$slides = Slide::where('repository_id', $repository->id)->get();
					foreach ($slides as $slide) {
						$slide->delete();
					}
					$repository->delete();
				}

				$image->delete();

				Que::Passa('Erro', 'Número máximo de tentativas de requisição',  $request);
				Log::info('PBI Image request failed after max attempts in request ' . $request->id);
			}
			Que::Passa('Erro', 'Erro na requisição da imagem do report na tentativa' . $request->attempts,  $request);
			Log::info('PBI Image request failed in attempt ' . $request->attempts . ' in request ' . $request->id);
			return response()->json(['error' => 'PBI Image request failed'], 400);
		} else if ($response['status'] == 'Succeeded') {
			$image = PBIImage::findOrFail($request->image_id);
			Log::info('PBI Image request succeeded in request ' . $request->id);
			$getImage = $this->getPBIImage($request, $image);
			return $getImage;
		}
	}

	private function getPBIImage($request, $image)
	{

		$fileUuid = $image->repository_id ?? Uuid::uuid4();
		$endpoint = config('powerbi.downloadExportedFile');
		$directory = '/uploads/' . $request->client_id;

		if (!Storage::disk('private')->exists($directory)) {
			Storage::disk('private')->makeDirectory($directory);
			$fullPath = Storage::disk('private')->path($directory);
			shell_exec("sudo chmod 775 {$fullPath}");
			shell_exec("sudo chown www-data:www-data {$fullPath}");
		}

		$response = $this->pbiRequestService->makeRequest('GET', $endpoint, [
			'accountId' => $request->account_id,
			'workspaceId' => $request->workspace_id,
			'reportId' => $request->object_id,
			'exportId' => $request->export_id
		]);

		$imagePath = $directory . '/' . $fileUuid;
		Storage::disk('private')->put($imagePath, $response['file']);

		$fullFilePath = Storage::disk('private')->path($imagePath);
		shell_exec("sudo chmod 775 {$fullFilePath}");
		shell_exec("sudo chown www-data:www-data {$fullFilePath}");

		if (!$image->repository_id) {
			$repository = Repository::create([
				'id' => $fileUuid,
				'client_id' => $request->client_id,
				'original_name' => 'File generated by PowerBI',
				'display_name' => $image->image_name,
				'file_type' => 'dinamic'
			]);
			$image->repository_id = $repository->id;
		}

		$request->status = 'success';
		$request->save();
		$image->status = 'success';
		$image->save();

		Log::info('PBI Image download succeeded in request ' . $request->id);

		$slides = Slide::where('repository_id', $image->repository_id)->get();
		foreach ($slides as $slide) {
			$signageId = $slide->signage_id;
			$signage = Signage::findOrFail($signageId);
			$signage->reload_flag = true;
			$signage->save();
		}

		Que::Passa('Info', 'Imagem baixada do PowerBI',  $image);
		return response()->json(['message' => 'Image created!']);
	}

	public function reloadImages()
	{
		PBIImage::query()->decrement('reload_time');
		$images = PBIImage::where('reload_time', 0)->get();
		foreach ($images as $image) {
			$image->status = 'updating';
			$image->reload_time = $image->image_time;
			$image->save();
			$object = PBIObject::findOrFail($image->object_id);
			$workspace = PBIWorkspace::findOrFail($object->workspace_id);
			$this->imageRequest($workspace->microsoft_id, $object, $image);
		}
	}

	public function imageRequest($workspaceMicrosoftId, $object, $image)
	{

		$endpoint = config('powerbi.reportExport');

		$workspaceId = $object->workspace_id;

		$workspace = PBIWorkspace::findOrFail($workspaceId);
		$request = PBIRequest::where('image_id', $image->id)->first();
		$userGlobalProperties = UserGlobalProperties::find($image->user_id);
		$user = User::find($userGlobalProperties->user_id);

		$requestData = [
			'format' => 'PNG',
			'powerBIReportConfiguration' => [
				'pages' => [
					[
						'pageName' => $image->pbi_name
					]
				]
			],
		];

		if (!empty($object->roles)) {
			$requestData['powerBIReportConfiguration']['identities'] = [
				[
					'customData' => null,
					'roles' => [$object->roles],
					'username' => $user->email,
					'datasets' => [$object->datasets]
				]
			];
		}

		$data = [
			'accountId' => $workspace->account_id,
			'workspaceId' => $workspaceMicrosoftId,
			'reportId' => $object->microsoft_id
		];

		$response = $this->pbiRequestService->makeRequest('POST', $endpoint, $data, $requestData);


		if (isset($response['status']) && isset($response['error'])) {
			return response()->json([
				'error' => 'Request failed',
				'status' => $response['status'],
				'message' => $response['error']
			], $response['status']);
		} else {
			if ($request) {
				$request->export_id = $response['id'];
				$request->status = 'pending';
				$request->attempts = 0;
				$request->save();
			} else {
				$currentAccountId = PermissionService::UserGlobalProperties()->current_account;
				$currentClientId = PermissionService::UserCurrentAccountProperties()->current_client;
				PBIRequest::create([
					'account_id' => $currentAccountId,
					'client_id' => $currentClientId,
					'image_id' => $image->id,
					'workspace_id' => $workspaceMicrosoftId,
					'object_id' => $object->microsoft_id,
					'export_id' => $response['id'],
					'page_name' => $image->pbi_name,
					'request_type' => 'pbi_image',
					'status' => 'pending',
					'attempts' => 0,
					'max_attempts' => 5
				]);
				Log::info('PBI Image request created for image ' . $image);
			}

			return response()->json($response);
		}
	}
}
