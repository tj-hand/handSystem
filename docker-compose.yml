# Networks
networks:
  app-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

services:

  # üé® Vue Container (Empty, ready for Vue project)
  vue:
    build:
      context: .
      dockerfile_inline: |
        FROM node:20-alpine

        # Install useful tools
        RUN apk add --no-cache bash git curl

        # Create working directory
        WORKDIR /app

        # Prevent root-owned node_modules from interfering
        RUN mkdir -p node_modules && chown -R node:node /app

        EXPOSE 3000

        # Just keep the container running, command will be overridden
        CMD ["tail", "-f", "/dev/null"]
    container_name: vue
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    environment:
      - NODE_ENV=development
    # Change the command to properly start the dev server
    command: bash -c "cd /app && npm install && npm run dev -- --host 0.0.0.0"


  # üêò PHP Container (Empty, ready for Laravel)
  php:
    build:
      context: .
      dockerfile_inline: |
        FROM php:8.3-fpm

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            git \
            curl \
            unzip \
            zip \
            libpng-dev \
            libonig-dev \
            libxml2-dev \
            libpq-dev \
            gnupg \
            ca-certificates \
            bash \
            && apt-get clean

        # Install PHP extensions required for Laravel and PostgreSQL
        RUN docker-php-ext-install pdo pdo_pgsql pgsql mbstring exif pcntl bcmath gd xml

        # Install PHP extensions
        RUN docker-php-ext-install \
            pdo \
            pdo_pgsql \
            mbstring \
            exif \
            pcntl \
            bcmath \
            gd \
            xml

        # Install Redis extension for PHP
        RUN pecl install redis && docker-php-ext-enable redis

        # Install Composer
        COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

        # Set working directory
        WORKDIR /var/www/backend

        # Default command
        CMD ["php-fpm"]

    container_name: laravel_php
    volumes:
      - ./backend:/var/www/backend
    networks:
      - app-network
    command: php-fpm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "php", "-v"]
      interval: 10s
      retries: 3


  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: laravel_postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    environment:
      - POSTGRES_DB=laravel
      - POSTGRES_USER=laravel
      - POSTGRES_PASSWORD=secret
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U laravel -d laravel"]
      interval: 10s
      timeout: 5s
      retries: 5

    # PgAdmin - Database Administration
  

  # üîß pgAdmin (Fixed email)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network


  # üåê Nginx (Simple configuration)
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "8080:80"    # Access Laravel at http://localhost:8080
    volumes:
      - ./backend:/var/www/backend
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      php:
        condition: service_healthy
    networks:
      - app-network


  # üî¥ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5


  # üìß Mailhog
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - app-network